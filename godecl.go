// A godecl experiment.
//
// Inspired by @bradfitz at https://twitter.com/bradfitz/status/833048466456600576.
package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/token"

	"github.com/shurcooL/go/parserutil"

	"honnef.co/go/js/dom"
)

var document = dom.GetWindow().Document()

var input = document.GetElementByID("input").(*dom.HTMLInputElement)
var output = document.GetElementByID("output").(*dom.HTMLDivElement)

func main() {
	input.AddEventListener("input", false, func(dom.Event) { run() })
	run()
}

func run() {
	out, err := GoToEnglish(input.Value)
	if err != nil {
		output.SetTextContent("error: " + err.Error())
		return
	}
	output.SetTextContent(out)
}

func GoToEnglish(x string) (string, error) {
	decl, err := parserutil.ParseDecl(x)
	if err != nil {
		return "", err
	}
	return DeclString(decl), nil
}

// DeclString returns the (possibly simplified) string representation for x.
func DeclString(x ast.Decl) string {
	var buf bytes.Buffer
	WriteDecl(&buf, x)
	return buf.String()
}

// WriteDecl writes the (possibly simplified) string representation for x to buf.
func WriteDecl(buf *bytes.Buffer, x ast.Decl) {
	switch x := x.(type) {
	default:
		fmt.Fprintf(buf, "<TODO: %T>", x)

	case *ast.GenDecl:
		buf.WriteString("declare ")
		for i, s := range x.Specs {
			if i > 0 {
				buf.WriteString(", ")
			}
			switch x.Tok {
			case token.VAR:
				buf.WriteString("variable")
			case token.CONST:
				buf.WriteString("constant")
			case token.TYPE:
				buf.WriteString("type")
			default:
				fmt.Fprintf(buf, "<TODO: %T>", x.Tok)
			}
			if isValueSpecPlural(s) {
				buf.WriteString("s") // Plural.
			}
			buf.WriteString(" ")
			WriteSpec(buf, s)
		}
	}
}

func isValueSpecPlural(x ast.Spec) bool {
	v, ok := x.(*ast.ValueSpec)
	if !ok {
		return false
	}
	return len(v.Names) > 1
}

// WriteSpec writes the (possibly simplified) string representation for x to buf.
func WriteSpec(buf *bytes.Buffer, x ast.Spec) {
	switch x := x.(type) {
	default:
		fmt.Fprintf(buf, "<TODO: %T>", x)

	case *ast.ValueSpec:
		for i, n := range x.Names {
			if i > 0 {
				buf.WriteString(" and ")
			}
			buf.WriteString(n.Name)
		}

		if x.Type != nil {
			buf.WriteString(" as ")
			WriteExpr(buf, x.Type)
			//if len(x.Names) > 1 {
			//	buf.WriteString("s") // Plural.
			//}
		}

		switch len(x.Values) {
		case 0:
			// Do nothing.
		case 1:
			buf.WriteString(" with initial value ")
		default:
			buf.WriteString(" with initial values ")
		}
		for i, v := range x.Values {
			if i > 0 {
				buf.WriteString(" and ")
			}
			WriteExpr(buf, v)
		}
	case *ast.TypeSpec:
		buf.WriteString(x.Name.Name)
		buf.WriteString(" as ")
		WriteExpr(buf, x.Type)
	}
}

// WriteExpr writes the (possibly simplified) string representation for x to buf.
func WriteExpr(buf *bytes.Buffer, x ast.Expr) {
	// The AST preserves source-level parentheses so there is
	// no need to introduce them here to correct for different
	// operator precedences. (This assumes that the AST was
	// generated by a Go parser.)

	switch x := x.(type) {
	default:
		buf.WriteString("(bad expr)") // nil, ast.BadExpr, ast.KeyValueExpr

	case *ast.Ident:
		buf.WriteString(x.Name)

	case *ast.Ellipsis:
		buf.WriteString("...")
		if x.Elt != nil {
			WriteExpr(buf, x.Elt)
		}

	case *ast.BasicLit:
		buf.WriteString(x.Value)

	case *ast.FuncLit:
		buf.WriteByte('(')
		WriteExpr(buf, x.Type)
		buf.WriteString(" literal)") // simplified

	case *ast.CompositeLit:
		buf.WriteByte('(')
		WriteExpr(buf, x.Type)
		buf.WriteString(" literal)") // simplified

	case *ast.ParenExpr:
		buf.WriteByte('(')
		WriteExpr(buf, x.X)
		buf.WriteByte(')')

	case *ast.SelectorExpr:
		WriteExpr(buf, x.X)
		buf.WriteByte('.')
		buf.WriteString(x.Sel.Name)

	case *ast.IndexExpr:
		WriteExpr(buf, x.X)
		buf.WriteByte('[')
		WriteExpr(buf, x.Index)
		buf.WriteByte(']')

	case *ast.SliceExpr:
		WriteExpr(buf, x.X)
		buf.WriteByte('[')
		if x.Low != nil {
			WriteExpr(buf, x.Low)
		}
		buf.WriteByte(':')
		if x.High != nil {
			WriteExpr(buf, x.High)
		}
		if x.Slice3 {
			buf.WriteByte(':')
			if x.Max != nil {
				WriteExpr(buf, x.Max)
			}
		}
		buf.WriteByte(']')

	case *ast.TypeAssertExpr:
		WriteExpr(buf, x.X)
		buf.WriteString(".(")
		WriteExpr(buf, x.Type)
		buf.WriteByte(')')

	case *ast.CallExpr:
		WriteExpr(buf, x.Fun)
		buf.WriteByte('(')
		for i, arg := range x.Args {
			if i > 0 {
				buf.WriteString(", ")
			}
			WriteExpr(buf, arg)
		}
		if x.Ellipsis.IsValid() {
			buf.WriteString("...")
		}
		buf.WriteByte(')')

	case *ast.StarExpr:
		buf.WriteString("pointer to ")
		WriteExpr(buf, x.X)

	case *ast.UnaryExpr:
		buf.WriteString(x.Op.String())
		WriteExpr(buf, x.X)

	case *ast.BinaryExpr:
		WriteExpr(buf, x.X)
		buf.WriteByte(' ')
		switch x.Op {
		default:
			buf.WriteString(x.Op.String())
		case token.ADD:
			buf.WriteString("plus")
		case token.SUB:
			buf.WriteString("minus")
		case token.QUO:
			buf.WriteString("divided by")
		}
		buf.WriteByte(' ')
		WriteExpr(buf, x.Y)

	case *ast.ArrayType:
		if x.Len == nil {
			buf.WriteString("slice of ")
		} else {
			buf.WriteString("array ")
			WriteExpr(buf, x.Len)
			buf.WriteString(" of ")
		}
		WriteExpr(buf, x.Elt)

	case *ast.StructType:
		buf.WriteString("struct{")
		writeFieldList(buf, x.Fields, "; ", false)
		buf.WriteByte('}')

	case *ast.FuncType:
		buf.WriteString("function ")
		writeSigExpr(buf, x)

	case *ast.InterfaceType:
		buf.WriteString("interface{")
		writeFieldList(buf, x.Methods, "; ", true)
		buf.WriteByte('}')

	case *ast.MapType:
		buf.WriteString("map of ")
		WriteExpr(buf, x.Key)
		buf.WriteString(" to ")
		WriteExpr(buf, x.Value)

	case *ast.ChanType:
		var s string
		switch x.Dir {
		case ast.SEND:
			s = "chan<- "
		case ast.RECV:
			s = "<-chan "
		default:
			s = "chan "
		}
		buf.WriteString(s)
		WriteExpr(buf, x.Value)
	}
}

func writeSigExpr(buf *bytes.Buffer, sig *ast.FuncType) {
	if sig.Params.NumFields() > 0 {
		buf.WriteString("taking ")
		writeFieldList(buf, sig.Params, " and ", false)
	}
	if sig.Params.NumFields() > 0 && sig.Results.NumFields() > 0 {
		buf.WriteString(" and ")
	}
	if sig.Results.NumFields() > 0 {
		buf.WriteString("returning ")
		writeFieldList(buf, sig.Results, " and ", false)
	}
}

func writeFieldList(buf *bytes.Buffer, fields *ast.FieldList, sep string, iface bool) {
	for i, f := range fields.List {
		if i > 0 {
			buf.WriteString(sep)
		}

		// field list names
		for i, name := range f.Names {
			if i > 0 {
				buf.WriteString(", ")
			}
			buf.WriteString(name.Name)
		}

		// types of interface methods consist of signatures only
		if sig, _ := f.Type.(*ast.FuncType); sig != nil && iface {
			writeSigExpr(buf, sig)
			continue
		}

		// named fields are separated with a blank from the field type
		if len(f.Names) > 0 {
			buf.WriteByte(' ')
		}

		WriteExpr(buf, f.Type)

		// ignore tag
	}
}
