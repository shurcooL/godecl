package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/parser"

	"github.com/shurcooL/go/parserutil"
	"github.com/shurcooL/go/printerutil"
	"honnef.co/go/js/dom"
)

var document = dom.GetWindow().Document()

var input = document.GetElementByID("input").(*dom.HTMLInputElement)
var output = document.GetElementByID("output").(*dom.HTMLDivElement)

func main() {
	input.AddEventListener("input", false, func(dom.Event) { run() })
	run()
}

func run() {
	/*out, err := run2(input.Value)
	if err != nil {
		output.SetTextContent("error: " + err.Error())
		return
	}
	output.SetTextContent(out)

	out, err = run3(input.Value)
	if err != nil {
		output.SetTextContent("error: " + err.Error())
		return
	}
	output.SetTextContent(output.TextContent() + "\n" + out)

	out, err := run4(input.Value)
	if err != nil {
		output.SetTextContent("error: " + err.Error())
		return
	}
	output.SetTextContent(output.TextContent() + "\n" + out)*/

	out, err := run4(input.Value)
	if err != nil {
		output.SetTextContent("error: " + err.Error())
		return
	}
	output.SetTextContent(out)
}

func run2(s string) (string, error) {
	decl, err := parserutil.ParseDecl(s)
	if err != nil {
		return "", err
	}
	var buf bytes.Buffer
	err = ast.Fprint(&buf, nil, decl, ast.NotNilFilter)
	if err != nil {
		return "", err
	}
	return buf.String(), nil
}

func run3(x string) (string, error) {
	decl, err := parserutil.ParseDecl(x)
	if err != nil {
		return "", err
	}
	var s string
	ast.Inspect(decl, func(n ast.Node) bool {
		if n != nil {
			s += fmt.Sprintf("%T: %v\n", n, printerutil.SprintAstBare(n))
		}
		return true
	})
	return s, nil
}

func run4(x string) (string, error) {
	expr, err := parser.ParseExpr(x)
	if err != nil {
		return "", err
	}
	return ExprString(expr), nil
}

/*var typeString func(t map[string]interface{}) string
typeString = func(t map[string]interface{}) string {
	switch t["kind"] {
	case "NON_NULL":
		s := typeString(t["ofType"].(map[string]interface{}))
		if !strings.HasPrefix(s, "*") {
			panic(fmt.Errorf("nullable type %q doesn't begin with '*'", s))
		}
		return s[1:] // Strip star from nullable type to make it non-null.
	case "LIST":
		return "*[]" + typeString(t["ofType"].(map[string]interface{}))
	default:
		return "*" + t["name"].(string)
	}
}*/

// ExprString returns the (possibly simplified) string representation for x.
func ExprString(x ast.Expr) string {
	var buf bytes.Buffer
	WriteExpr(&buf, x)
	return buf.String()
}

// WriteExpr writes the (possibly simplified) string representation for x to buf.
func WriteExpr(buf *bytes.Buffer, x ast.Expr) {
	// The AST preserves source-level parentheses so there is
	// no need to introduce them here to correct for different
	// operator precedences. (This assumes that the AST was
	// generated by a Go parser.)

	switch x := x.(type) {
	default:
		buf.WriteString("(bad expr)") // nil, ast.BadExpr, ast.KeyValueExpr

	case *ast.Ident:
		buf.WriteString(x.Name)

	case *ast.Ellipsis:
		buf.WriteString("...")
		if x.Elt != nil {
			WriteExpr(buf, x.Elt)
		}

	case *ast.BasicLit:
		buf.WriteString(x.Value)

	case *ast.FuncLit:
		buf.WriteByte('(')
		WriteExpr(buf, x.Type)
		buf.WriteString(" literal)") // simplified

	case *ast.CompositeLit:
		buf.WriteByte('(')
		WriteExpr(buf, x.Type)
		buf.WriteString(" literal)") // simplified

	case *ast.ParenExpr:
		buf.WriteByte('(')
		WriteExpr(buf, x.X)
		buf.WriteByte(')')

	case *ast.SelectorExpr:
		WriteExpr(buf, x.X)
		buf.WriteByte('.')
		buf.WriteString(x.Sel.Name)

	case *ast.IndexExpr:
		WriteExpr(buf, x.X)
		buf.WriteByte('[')
		WriteExpr(buf, x.Index)
		buf.WriteByte(']')

	case *ast.SliceExpr:
		WriteExpr(buf, x.X)
		buf.WriteByte('[')
		if x.Low != nil {
			WriteExpr(buf, x.Low)
		}
		buf.WriteByte(':')
		if x.High != nil {
			WriteExpr(buf, x.High)
		}
		if x.Slice3 {
			buf.WriteByte(':')
			if x.Max != nil {
				WriteExpr(buf, x.Max)
			}
		}
		buf.WriteByte(']')

	case *ast.TypeAssertExpr:
		WriteExpr(buf, x.X)
		buf.WriteString(".(")
		WriteExpr(buf, x.Type)
		buf.WriteByte(')')

	case *ast.CallExpr:
		WriteExpr(buf, x.Fun)
		buf.WriteByte('(')
		for i, arg := range x.Args {
			if i > 0 {
				buf.WriteString(", ")
			}
			WriteExpr(buf, arg)
		}
		if x.Ellipsis.IsValid() {
			buf.WriteString("...")
		}
		buf.WriteByte(')')

	case *ast.StarExpr:
		buf.WriteString("pointer to ")
		WriteExpr(buf, x.X)

	case *ast.UnaryExpr:
		buf.WriteString(x.Op.String())
		WriteExpr(buf, x.X)

	case *ast.BinaryExpr:
		WriteExpr(buf, x.X)
		buf.WriteByte(' ')
		buf.WriteString(x.Op.String())
		buf.WriteByte(' ')
		WriteExpr(buf, x.Y)

	case *ast.ArrayType:
		if x.Len == nil {
			buf.WriteString("slice of ")
		} else {
			buf.WriteString("array ")
			WriteExpr(buf, x.Len)
			buf.WriteString(" of ")
		}
		WriteExpr(buf, x.Elt)

	case *ast.StructType:
		buf.WriteString("struct{")
		writeFieldList(buf, x.Fields, "; ", false)
		buf.WriteByte('}')

	case *ast.FuncType:
		buf.WriteString("func")
		writeSigExpr(buf, x)

	case *ast.InterfaceType:
		buf.WriteString("interface{")
		writeFieldList(buf, x.Methods, "; ", true)
		buf.WriteByte('}')

	case *ast.MapType:
		buf.WriteString("map of ")
		WriteExpr(buf, x.Key)
		buf.WriteString(" to ")
		WriteExpr(buf, x.Value)

	case *ast.ChanType:
		var s string
		switch x.Dir {
		case ast.SEND:
			s = "chan<- "
		case ast.RECV:
			s = "<-chan "
		default:
			s = "chan "
		}
		buf.WriteString(s)
		WriteExpr(buf, x.Value)
	}
}

func writeSigExpr(buf *bytes.Buffer, sig *ast.FuncType) {
	buf.WriteByte('(')
	writeFieldList(buf, sig.Params, ", ", false)
	buf.WriteByte(')')

	res := sig.Results
	n := res.NumFields()
	if n == 0 {
		// no result
		return
	}

	buf.WriteByte(' ')
	if n == 1 && len(res.List[0].Names) == 0 {
		// single unnamed result
		WriteExpr(buf, res.List[0].Type)
		return
	}

	// multiple or named result(s)
	buf.WriteByte('(')
	writeFieldList(buf, res, ", ", false)
	buf.WriteByte(')')
}

func writeFieldList(buf *bytes.Buffer, fields *ast.FieldList, sep string, iface bool) {
	for i, f := range fields.List {
		if i > 0 {
			buf.WriteString(sep)
		}

		// field list names
		for i, name := range f.Names {
			if i > 0 {
				buf.WriteString(", ")
			}
			buf.WriteString(name.Name)
		}

		// types of interface methods consist of signatures only
		if sig, _ := f.Type.(*ast.FuncType); sig != nil && iface {
			writeSigExpr(buf, sig)
			continue
		}

		// named fields are separated with a blank from the field type
		if len(f.Names) > 0 {
			buf.WriteByte(' ')
		}

		WriteExpr(buf, f.Type)

		// ignore tag
	}
}
